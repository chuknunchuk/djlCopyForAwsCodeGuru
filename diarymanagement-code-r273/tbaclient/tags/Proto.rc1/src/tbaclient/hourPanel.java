/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * hourPanel.java
 *
 * Created on 28/08/2009, 16:37:34
 *
 */

package tbaclient;

import TBA.Client.GUI.AddEntryDialog;
import TBA.Client.GUI.jImagePanel;
import TBA.Data.Entry;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.Timer;

/**
 *
 * @author Joseph Neasy
 * @author Dan McGrath
 */
public class hourPanel extends jImagePanel {
   private Entry aEntry = null;
   private JLabel fadeLeft;
   private JLabel fadeRight;
   private ImageIcon backCell;
   private ImageIcon selectCell;
   private ImageIcon pastCell;
   private ImageIcon nowCell;
   private ImageIcon nextCell;
   private ImageIcon soonCell;
   Timer cellRefresher;

   public void setFadeLeft(JLabel fadeLeft, JLabel fadeRight)
   {
      this.fadeLeft = fadeLeft;
      this.fadeRight = fadeRight;
   }

   AddEntryDialog entryForm;

   /** Creates new form hourPanel */
   public hourPanel()
   {
      initComponents();
      //System.out.println(aEntry.getSubject());
      backCell = new javax.swing.ImageIcon(getClass().getResource("/TBA/Images/CellBack.png"));
      selectCell = new javax.swing.ImageIcon(getClass().getResource("/TBA/Images/CellSelect.png"));
      pastCell = new javax.swing.ImageIcon(getClass().getResource("/TBA/Images/CellPast.png"));
      nowCell = new javax.swing.ImageIcon(getClass().getResource("/TBA/Images/CellNow.png"));
      nextCell = new javax.swing.ImageIcon(getClass().getResource("/TBA/Images/CellNext.png"));
      soonCell = new javax.swing.ImageIcon(getClass().getResource("/TBA/Images/CellSoon.png"));
      setBackgroundImage(switchBackground());

      cellRefresher = new Timer(30000, new ActionListener()
      {
         public void actionPerformed(ActionEvent e)
         {
            ImageIcon temp = switchBackground();
            if(!temp.equals(getBackgroundImage()))
            {
               setBackgroundImage(temp);
               repaint();
               fadeLeft.repaint();
               fadeRight.repaint();
            }
         }
      });
      cellRefresher.start();
   }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseEntered
    {//GEN-HEADEREND:event_formMouseEntered
        setBackgroundImage(selectCell);
        repaint();
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseExited
    {//GEN-HEADEREND:event_formMouseExited
        setBackgroundImage(switchBackground());
        repaint();
        fadeLeft.repaint();
        fadeRight.repaint();
    }//GEN-LAST:event_formMouseExited

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (evt.getClickCount() == 2){
            if (aEntry != null)
                System.out.println(aEntry.toString()+" test");
            entryForm = new AddEntryDialog(null, true);
            entryForm.setEntry(aEntry);
            entryForm.setVisible(true);
        }
    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

   public Entry getEntry() {
     return aEntry;
   }

   public void setEntry(Entry aEntry)
   {
     this.aEntry = aEntry;
     if (aEntry != null)
     {
         jLabel1.setText(this.aEntry.getSubject());
     } else
     {
         jLabel1.setText("");
     }
     setBackgroundImage(switchBackground());
   }

   private ImageIcon switchBackground()
   {
      Calendar now = Calendar.getInstance();

      if(aEntry == null)
      {
         return backCell;
      }
      if(aEntry.getStart() == null || aEntry.getEnd() == null)
      {
         return backCell;
      }

      if(aEntry.getEnd().before(now))
      {
       return pastCell;
      }
      if(aEntry.getStart().before(now))
      {
         // Already tested End by here
         return nowCell;
      }

      now.add(Calendar.HOUR, 1);
      if(aEntry.getStart().before(now))
      {
       return nextCell;
      }

      now.add(Calendar.HOUR, 1);
      int nowDay = now.get(Calendar.DAY_OF_YEAR);
      int nowYear = now.get(Calendar.YEAR);
      int day = aEntry.getStart().get(Calendar.DAY_OF_YEAR);
      int year = aEntry.getStart().get(Calendar.YEAR);

      if(nowDay == day && nowYear == year)
      {
         return soonCell;
      }

      return backCell;
   }
}
