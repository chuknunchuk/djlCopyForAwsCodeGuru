package tbaclient;

import TBA.Client.GUI.*;
import TBA.Communications.ServerCom;
import TBA.Data.*;
import TBA.Data.Entry;
import TBA.Exceptions.ServerComException;
import TBA.Logging.TBALogger;
import com.smardec.mousegestures.MouseGestures;
import com.smardec.mousegestures.MouseGesturesListener;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.PointerInfo;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.Calendar;
import java.util.Vector;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *This is the main client view class
 * @author Joe
 * @author Dan McGrath
 *
 * @version $Rev:: 135           $ $Date:: 2009-09-17 #$
 */
public class mainclientview extends javax.swing.JFrame
{
   public User currentUser;
   public ServerCom server;
   private final static Logger LOGIT = Logger.getLogger(mainclientview.class.getName());
   private static int port = 9999;
   private static String serverAddress = "localhost";
   private static mainclientview Main;
   MouseGestures mouseGestures = new MouseGestures();

    /** Creates new form mainclientview */
   public mainclientview()
   {
      System.setProperty("javax.net.ssl.trustStore", "tbaKeyStore");
      System.setProperty("javax.net.ssl.trustStorePassword", "Rgr4j9");

      initComponents();
      initPanelPos();
      setuptmpDiary();
      server = new ServerCom();

      try
      {
         server.Start(serverAddress, port);
      }
      catch(ServerComException ex)
      { }
      finally
      {
         LogOnDialog.server = server;
      }
      mouseGestures.setMouseButton(MouseEvent.BUTTON3_MASK);
      mouseGestures.addMouseGesturesListener(new MouseGesturesListener()
      {
         public void gestureMovementRecognized(String currentGesture)
         {
            // Follow this format for all mouse gestures.
            // 1) Test for the mouse gesture first
            // 2) Once you have identified the mouse gesture, test if it was cancelled
            if(currentGesture.startsWith("LRLRL") || currentGesture.startsWith("RLRLR"))
            { // Login request!
               if(!currentGesture.endsWith("DUDUD") && !currentGesture.endsWith("UDUDU"))
               {
                  mouseGestureText.setText("Mouse Gesture: Log On");
               }
               else
               {
                  mouseGestureText.setText("Mouse Gesture: Cancelled");
               }
            }

         }
         //This method is called when the user releases the mouse button finally
         //Just display the current message for a few milliseconds then
         //redisplay the original text
         public void processGesture(String gesture)
         {
            mouseGestureText.setText("");

            // Follow this format for all processing all mouse gestures.
            // 1) Test if the gesture was cancelled
            // 2) If it wasn't, identify which gesture it was
            if(!gesture.endsWith("DUDUD") && !gesture.endsWith("UDUDU"))
            {
               if(gesture.indexOf("LRLRL") == 0 || gesture.indexOf("RLRLR") == 0)
               { // Login request!
                  mouseGestureText.setText("Mouse Gesture: Log On");
                  if (!LogOnDialog.loggedOn)
                  {
                  LogOnDialog logon = new LogOnDialog(Main, true);

                  logon.addComponentListener(new java.awt.event.ComponentAdapter()
                  {
                     @Override
                     public void componentHidden(java.awt.event.ComponentEvent e)
                     {
                       actionCheckLogin();
                     }
                  });

                  logon.setVisible(true);
                  }
               }
            }
         }
       });
       mouseGestures.start();
   }

   private void clearTime(Calendar panelDate)
   {
      panelDate.set(Calendar.AM_PM, Calendar.AM);
      panelDate.set(Calendar.HOUR, 0);
      panelDate.set(Calendar.MINUTE, 0);
      panelDate.set(Calendar.SECOND, 0);
      panelDate.set(Calendar.MILLISECOND, 0);
   }
 
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jPanel2 = new jImagePanel();
      displayName = new javax.swing.JLabel();
      diaryList = new javax.swing.JComboBox();
      jToolBar1 = new javax.swing.JToolBar();
      mouseGestureText = new javax.swing.JLabel();
      jPanel1 = new jImageLayeredPane();
      fadeRight = new javax.swing.JLabel();
      fadeLeft = new javax.swing.JLabel();
      jPanel4 = new tbaclient.DayPanel();
      jPanel3 = new tbaclient.DayPanel();
      jPanel5 = new tbaclient.DayPanel();
      jPanel6 = new tbaclient.DayPanel();
      jPanel7 = new tbaclient.DayPanel();
      jPanel8 = new tbaclient.DayPanel();
      jPanel9 = new tbaclient.DayPanel();
      jPanel10 = new tbaclient.DayPanel();
      jPanel11 = new javax.swing.JPanel();
      jMenuBar1 = new javax.swing.JMenuBar();
      fileMenu = new javax.swing.JMenu();
      logOnMenuItem = new javax.swing.JMenuItem();
      logOffMenuItem = new javax.swing.JMenuItem();
      exitMenuItem = new javax.swing.JMenuItem();
      jMenu2 = new javax.swing.JMenu();
      settingsMenu = new javax.swing.JMenu();
      helpMenu = new javax.swing.JMenu();
      aboutMenuItem = new javax.swing.JMenuItem();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setResizable(false);

      jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      displayName.setText("[No logged on]");

      diaryList.setMaximumRowCount(16);
      diaryList.setActionCommand("");
      diaryList.setFocusTraversalPolicyProvider(true);
      diaryList.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            diaryListActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(diaryList, javax.swing.GroupLayout.Alignment.LEADING, 0, 128, Short.MAX_VALUE)
               .addComponent(displayName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
            .addContainerGap())
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(displayName)
            .addGap(18, 18, 18)
            .addComponent(diaryList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(404, Short.MAX_VALUE))
      );

      jToolBar1.setFloatable(false);
      jToolBar1.setRollover(true);

      mouseGestureText.setText("Demo Mouse Gestures...");
      jToolBar1.add(mouseGestureText);

      jPanel1.setAutoscrolls(true);
      jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            jPanel1MouseClicked(evt);
         }
         public void mousePressed(java.awt.event.MouseEvent evt) {
            jPanel1MousePressed(evt);
         }
      });
      jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
         public void mouseDragged(java.awt.event.MouseEvent evt) {
            jPanel1MouseDragged(evt);
         }
      });

      fadeRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TBA/Images/backgroundRightFade.png"))); // NOI18N
      fadeRight.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
         public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
            fadeRightMouseWheelMoved(evt);
         }
      });
      fadeRight.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseEntered(java.awt.event.MouseEvent evt) {
            fadeRightMouseEntered(evt);
         }
         public void mouseExited(java.awt.event.MouseEvent evt) {
            fadeRightMouseExited(evt);
         }
         public void mousePressed(java.awt.event.MouseEvent evt) {
            fadeRightMousePressed(evt);
         }
         public void mouseReleased(java.awt.event.MouseEvent evt) {
            fadeRightMouseReleased(evt);
         }
      });
      fadeRight.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
         public void mouseDragged(java.awt.event.MouseEvent evt) {
            fadeRightMouseDragged(evt);
         }
         public void mouseMoved(java.awt.event.MouseEvent evt) {
            fadeRightMouseMoved(evt);
         }
      });
      fadeRight.setBounds(630, 0, 130, 470);
      jPanel1.add(fadeRight, javax.swing.JLayeredPane.DEFAULT_LAYER);

      fadeLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TBA/Images/backgroundLeftFade.png"))); // NOI18N
      fadeLeft.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
         public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
            fadeLeftMouseWheelMoved(evt);
         }
      });
      fadeLeft.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            fadeLeftMouseClicked(evt);
         }
         public void mouseEntered(java.awt.event.MouseEvent evt) {
            fadeLeftMouseEntered(evt);
         }
         public void mouseExited(java.awt.event.MouseEvent evt) {
            fadeLeftMouseExited(evt);
         }
         public void mousePressed(java.awt.event.MouseEvent evt) {
            fadeLeftMousePressed(evt);
         }
         public void mouseReleased(java.awt.event.MouseEvent evt) {
            fadeLeftMouseReleased(evt);
         }
      });
      fadeLeft.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
         public void mouseDragged(java.awt.event.MouseEvent evt) {
            fadeLeftMouseDragged(evt);
         }
         public void mouseMoved(java.awt.event.MouseEvent evt) {
            fadeLeftMouseMoved(evt);
         }
      });
      fadeLeft.setBounds(0, 0, 150, 470);
      jPanel1.add(fadeLeft, javax.swing.JLayeredPane.DEFAULT_LAYER);

      jPanel4.setFadeLeft(fadeLeft, fadeRight);
      jPanel4.setOpaque(false);
      jPanel4.setBounds(330, 10, 145, 460);
      jPanel1.add(jPanel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

      jPanel3.setFadeLeft(fadeLeft, fadeRight);
      jPanel3.setOpaque(false);
      jPanel3.setBounds(330, 10, 145, 460);
      jPanel1.add(jPanel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

      jPanel5.setFadeLeft(fadeLeft, fadeRight);
      jPanel5.setOpaque(false);
      jPanel5.setBounds(330, 10, 145, 460);
      jPanel1.add(jPanel5, javax.swing.JLayeredPane.DEFAULT_LAYER);

      jPanel6.setFadeLeft(fadeLeft, fadeRight);
      jPanel6.setOpaque(false);
      jPanel6.setBounds(330, 10, 145, 460);
      jPanel1.add(jPanel6, javax.swing.JLayeredPane.DEFAULT_LAYER);

      jPanel7.setFadeLeft(fadeLeft, fadeRight);
      jPanel7.setOpaque(false);
      jPanel7.setBounds(330, 10, 145, 460);
      jPanel1.add(jPanel7, javax.swing.JLayeredPane.DEFAULT_LAYER);

      jPanel8.setFadeLeft(fadeLeft, fadeRight);
      jPanel8.setOpaque(false);
      jPanel8.setBounds(330, 10, 145, 460);
      jPanel1.add(jPanel8, javax.swing.JLayeredPane.DEFAULT_LAYER);

      jPanel9.setFadeLeft(fadeLeft, fadeRight);
      jPanel9.setOpaque(false);
      jPanel9.setBounds(330, 10, 145, 460);
      jPanel1.add(jPanel9, javax.swing.JLayeredPane.DEFAULT_LAYER);

      jPanel10.setFadeLeft(fadeLeft, fadeRight);
      jPanel10.setOpaque(false);
      jPanel10.setBounds(330, 10, 145, 460);
      jPanel1.add(jPanel10, javax.swing.JLayeredPane.DEFAULT_LAYER);

      jPanel11.setOpaque(false);
      jPanel11.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mousePressed(java.awt.event.MouseEvent evt) {
            jPanel11MousePressed(evt);
         }
      });
      jPanel11.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
         public void mouseDragged(java.awt.event.MouseEvent evt) {
            jPanel11MouseDragged(evt);
         }
      });

      javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
      jPanel11.setLayout(jPanel11Layout);
      jPanel11Layout.setHorizontalGroup(
         jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 750, Short.MAX_VALUE)
      );
      jPanel11Layout.setVerticalGroup(
         jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 500, Short.MAX_VALUE)
      );

      jPanel11.setBounds(0, 0, 750, 500);
      jPanel1.add(jPanel11, javax.swing.JLayeredPane.DEFAULT_LAYER);

      fileMenu.setMnemonic('F');
      fileMenu.setText("File");

      logOnMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
      logOnMenuItem.setText("Log On");
      logOnMenuItem.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            logOnMenuItemActionPerformed(evt);
         }
      });
      fileMenu.add(logOnMenuItem);

      logOffMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
      logOffMenuItem.setText("Log Off");
      logOffMenuItem.setEnabled(false);
      logOffMenuItem.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            logOffMenuItemActionPerformed(evt);
         }
      });
      fileMenu.add(logOffMenuItem);

      exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
      exitMenuItem.setText("Exit");
      exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            exitMenuItemActionPerformed(evt);
         }
      });
      fileMenu.add(exitMenuItem);

      jMenuBar1.add(fileMenu);

      jMenu2.setMnemonic('E');
      jMenu2.setText("Edit");
      jMenuBar1.add(jMenu2);

      settingsMenu.setMnemonic('S');
      settingsMenu.setText("Setting");
      jMenuBar1.add(settingsMenu);

      helpMenu.setMnemonic('H');
      helpMenu.setText("Help");

      aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
      aboutMenuItem.setText("About TBA");
      aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            aboutMenuItemActionPerformed(evt);
         }
      });
      helpMenu.add(aboutMenuItem);

      jMenuBar1.add(helpMenu);

      setJMenuBar(jMenuBar1);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 752, javax.swing.GroupLayout.PREFERRED_SIZE))
         .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 920, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
               .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    /**
    * Parse the command line arguments
    *<p>
    * @param args Command line arguments. Currently it supports a handful of
    * switches.
    * <p>
    * Firstly, '-p x' or '--port x', where x is the port number you
    * wish the server to listen on.
    * <p>
    * Next is '-l level' or '--log-level level'
    * where 'level' is one of SEVERE, WARNING, INFO, FINE, FINER or FINEST
    * <p>
    * Lastly is '-c' or '--console' which enables logging to the console
    */
   private static void parseArgs(String args[])
   {
      String arg = null;
      for (int argnum = 0; argnum < args.length; argnum++)
      {
         arg = args[argnum];
         if (arg.compareTo("-l") == 0 || arg.compareTo("--log-level") == 0)
         {
            argnum++;
            if (argnum < args.length)
            {
               arg = args[argnum];
               try
               {
                  Level loglevel = Level.parse(arg);
                  TBALogger.setLevel(loglevel);
                  LOGIT.setLevel(loglevel);

                  // Setup this classes logger to write to the console
                  for(Handler logHandler : LOGIT.getHandlers())
                  {
                     logHandler.setLevel(loglevel);
                  }

                  LOGIT.info("Change Log level to: " + arg);
               }
               catch (IllegalArgumentException ex)
               {
                  LOGIT.warning("Invalid Log Level set via parameter: " + arg);
               }
               catch (IOException ex)
               {
                  LOGIT.warning("Error setting log level");
                  LOGIT.info(ex.getLocalizedMessage());
               }
            }
            else
            {
               LOGIT.warning("Missing detail for Log Level argument");
            }
         }
         else if (arg.compareTo("-p") == 0 || arg.compareTo("--port") == 0)
         {
            argnum++;
            if (argnum < args.length)
            {
               arg = args[argnum];
               try
               {
                  int portnum = Integer.parseInt(arg);
                  if(portnum > 1024 && portnum < 65536)
                  {
                     port = portnum;
                  }
                  else
                  {
                     LOGIT.warning("Out of range Port number set via parameter: " + arg);
                  }
               }
               catch (NumberFormatException ex)
               {
                  LOGIT.warning("Invalid Port number set via parameter: " + arg);
               }
            }
            else
            {
               LOGIT.warning("Missing detail for Port Number argument");
            }
         }
      }
   }

    private void logOnMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_logOnMenuItemActionPerformed
    {//GEN-HEADEREND:event_logOnMenuItemActionPerformed
      LogOnDialog logon = new LogOnDialog(Main, true);

      logon.addComponentListener(new java.awt.event.ComponentAdapter()
      {
         @Override
         public void componentHidden(java.awt.event.ComponentEvent e)
         {
            actionCheckLogin();
         }
      });

      logon.setVisible(true);
    }//GEN-LAST:event_logOnMenuItemActionPerformed

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
       if((evt.getModifiersEx() & MouseEvent.BUTTON3_DOWN_MASK) != MouseEvent.BUTTON3_DOWN_MASK)
       {
         offsetPanels();
       }
    }//GEN-LAST:event_jPanel1MouseDragged

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        getMousePos();
    }//GEN-LAST:event_jPanel1MousePressed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitMenuItemActionPerformed
    {//GEN-HEADEREND:event_exitMenuItemActionPerformed
       LOGIT.severe("Client closed - User exit");
       System.exit(0);
}//GEN-LAST:event_exitMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutMenuItemActionPerformed
        AboutDialog.main(null);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void diaryListActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_diaryListActionPerformed
    {//GEN-HEADEREND:event_diaryListActionPerformed
       
    }//GEN-LAST:event_diaryListActionPerformed

    private void logOffMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_logOffMenuItemActionPerformed
    {//GEN-HEADEREND:event_logOffMenuItemActionPerformed
      try
      {
         server.Logout(LogOnDialog.thisUser.getSessionID());
         LogOnDialog.loggedOn = false;
         actionLogout();
      }
      catch (ServerComException ex)
      {
         // Ignore as we can't do anything about this at the moment...
      }

    }//GEN-LAST:event_logOffMenuItemActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
    }//GEN-LAST:event_jPanel1MouseClicked

    private void fadeLeftMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_fadeLeftMouseClicked
    {//GEN-HEADEREND:event_fadeLeftMouseClicked
}//GEN-LAST:event_fadeLeftMouseClicked

    private void fadeLeftMouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_fadeLeftMouseEntered
    {//GEN-HEADEREND:event_fadeLeftMouseEntered
}//GEN-LAST:event_fadeLeftMouseEntered

    private void fadeLeftMouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_fadeLeftMouseExited
    {//GEN-HEADEREND:event_fadeLeftMouseExited
}//GEN-LAST:event_fadeLeftMouseExited

    private void fadeLeftMouseMoved(java.awt.event.MouseEvent evt)//GEN-FIRST:event_fadeLeftMouseMoved
    {//GEN-HEADEREND:event_fadeLeftMouseMoved
}//GEN-LAST:event_fadeLeftMouseMoved

    private void fadeLeftMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_fadeLeftMousePressed
    {//GEN-HEADEREND:event_fadeLeftMousePressed
        getMousePos();
}//GEN-LAST:event_fadeLeftMousePressed

    private void fadeLeftMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_fadeLeftMouseReleased
    {//GEN-HEADEREND:event_fadeLeftMouseReleased
}//GEN-LAST:event_fadeLeftMouseReleased

    private void fadeLeftMouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_fadeLeftMouseWheelMoved
    {//GEN-HEADEREND:event_fadeLeftMouseWheelMoved
}//GEN-LAST:event_fadeLeftMouseWheelMoved

    private void fadeLeftMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_fadeLeftMouseDragged
    {//GEN-HEADEREND:event_fadeLeftMouseDragged
       if((evt.getModifiersEx() & MouseEvent.BUTTON3_DOWN_MASK) != MouseEvent.BUTTON3_DOWN_MASK)
       {
         offsetPanels();
       }
}//GEN-LAST:event_fadeLeftMouseDragged

    private void fadeRightMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_fadeRightMouseDragged
    {//GEN-HEADEREND:event_fadeRightMouseDragged
       if((evt.getModifiersEx() & MouseEvent.BUTTON3_DOWN_MASK) != MouseEvent.BUTTON3_DOWN_MASK)
       {
         offsetPanels();
       }
}//GEN-LAST:event_fadeRightMouseDragged

    private void fadeRightMouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_fadeRightMouseEntered
    {//GEN-HEADEREND:event_fadeRightMouseEntered
}//GEN-LAST:event_fadeRightMouseEntered

    private void fadeRightMouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_fadeRightMouseExited
    {//GEN-HEADEREND:event_fadeRightMouseExited
}//GEN-LAST:event_fadeRightMouseExited

    private void fadeRightMouseMoved(java.awt.event.MouseEvent evt)//GEN-FIRST:event_fadeRightMouseMoved
    {//GEN-HEADEREND:event_fadeRightMouseMoved
}//GEN-LAST:event_fadeRightMouseMoved

    private void fadeRightMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_fadeRightMousePressed
    {//GEN-HEADEREND:event_fadeRightMousePressed
        getMousePos();
}//GEN-LAST:event_fadeRightMousePressed

    private void fadeRightMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_fadeRightMouseReleased
    {//GEN-HEADEREND:event_fadeRightMouseReleased
}//GEN-LAST:event_fadeRightMouseReleased

    private void fadeRightMouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_fadeRightMouseWheelMoved
    {//GEN-HEADEREND:event_fadeRightMouseWheelMoved
}//GEN-LAST:event_fadeRightMouseWheelMoved

    private void jPanel11MouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jPanel11MouseDragged
    {//GEN-HEADEREND:event_jPanel11MouseDragged
       if((evt.getModifiersEx() & MouseEvent.BUTTON3_DOWN_MASK) != MouseEvent.BUTTON3_DOWN_MASK)
       {
         offsetPanels();
       }
    }//GEN-LAST:event_jPanel11MouseDragged

    private void jPanel11MousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jPanel11MousePressed
    {//GEN-HEADEREND:event_jPanel11MousePressed
        getMousePos();
    }//GEN-LAST:event_jPanel11MousePressed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[])
    {
      try
      {
         TBALogger.setup("TBAClient.log");
         TBALogger.removeConsole();
         LOGIT.info("Starting Client");
         parseArgs(args);
      }
      catch (IOException ex)
      {
         // Don't let logging stop our client...
         // Just log it to console if possible.
         LOGIT.warning("Error: Could not create the log file");
         LOGIT.info(ex.getLocalizedMessage());
      }

      java.awt.EventQueue.invokeLater(new Runnable()
      {
         public void run()
         {
            Main = new mainclientview();
            Main.setVisible(true);
         }
      });
    }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JMenuItem aboutMenuItem;
   private javax.swing.JComboBox diaryList;
   private javax.swing.JLabel displayName;
   private javax.swing.JMenuItem exitMenuItem;
   private javax.swing.JLabel fadeLeft;
   private javax.swing.JLabel fadeRight;
   private javax.swing.JMenu fileMenu;
   private javax.swing.JMenu helpMenu;
   private javax.swing.JMenu jMenu2;
   private javax.swing.JMenuBar jMenuBar1;
   private javax.swing.JLayeredPane jPanel1;
   private tbaclient.DayPanel jPanel10;
   private javax.swing.JPanel jPanel11;
   private javax.swing.JPanel jPanel2;
   private tbaclient.DayPanel jPanel3;
   private tbaclient.DayPanel jPanel4;
   private tbaclient.DayPanel jPanel5;
   private tbaclient.DayPanel jPanel6;
   private tbaclient.DayPanel jPanel7;
   private tbaclient.DayPanel jPanel8;
   private tbaclient.DayPanel jPanel9;
   private javax.swing.JToolBar jToolBar1;
   private javax.swing.JMenuItem logOffMenuItem;
   private javax.swing.JMenuItem logOnMenuItem;
   private javax.swing.JLabel mouseGestureText;
   private javax.swing.JMenu settingsMenu;
   // End of variables declaration//GEN-END:variables
    private int prevPos = 0;
    private Diary tmpDiary = new Diary();
    
    void setuptmpDiary(){

        tmpDiary.setID(1);
        tmpDiary.setName("test");
        Entry tmpEntry;
        Entry tmpEntry1 = new Entry();
        Entry tmpEntry2 = new Entry();
        Entry tmpEntry3 = new Entry();

        for(int d = 0; d < 8; d++)
        {
            tmpEntry = new Entry();
            tmpEntry.setSubject("me");
            tmpEntry.setBody("i will not install open office");
            tmpEntry.setStart(Calendar.getInstance());
            tmpEntry.getStart().add(Calendar.MINUTE, 10*d);
            tmpEntry.setEnd(Calendar.getInstance());
            tmpEntry.getEnd().add(Calendar.MINUTE, 10*(d+1));
            tmpDiary.addEntry(tmpEntry);
        }

        tmpEntry1.setSubject("charles");
        tmpEntry1.setBody("blah blah");
        tmpEntry1.setStart(Calendar.getInstance());
        tmpEntry1.getStart().add(Calendar.DAY_OF_YEAR, 10);
        tmpEntry1.setEnd(Calendar.getInstance());
        tmpEntry1.getEnd().add(Calendar.DAY_OF_YEAR, 10);
        tmpEntry1.getEnd().add(Calendar.MINUTE, 10);
        tmpDiary.addEntry(tmpEntry1);

        tmpEntry2.setSubject("Dan");
        tmpEntry2.setBody("Meh");
        tmpEntry2.setStart(Calendar.getInstance());
        tmpEntry2.getStart().add(Calendar.DAY_OF_YEAR, -11);
        tmpEntry2.setEnd(Calendar.getInstance());
        tmpEntry2.getEnd().add(Calendar.DAY_OF_YEAR, -11);
        tmpEntry1.getEnd().add(Calendar.MINUTE, 10);
        tmpDiary.addEntry(tmpEntry2);

        tmpEntry3.setSubject("kyle");
        tmpEntry3.setBody("Big T");
        tmpEntry3.setStart(Calendar.getInstance());
        tmpEntry3.getStart().add(Calendar.DAY_OF_YEAR, +11);
        tmpEntry3.setEnd(Calendar.getInstance());
        tmpEntry3.getEnd().add(Calendar.DAY_OF_YEAR, +11);
        tmpEntry3.getEnd().add(Calendar.MINUTE, 10);
        tmpDiary.addEntry(tmpEntry3);

        Vector<Entry> entries = null;
        entries = tmpDiary.getEntries();

        //System.out.println(entries.elementAt(0).getStart().getTime().toString());
        System.out.println("this is a test1 "+entries.elementAt(0).getStart().getTime().toString());
        System.out.println("this is a test2 "+entries.elementAt(1).getStart().getTime().toString());
        System.out.println("this is a test3 "+entries.elementAt(2).getStart().getTime().toString());
        System.out.println("this is a test4 "+entries.elementAt(3).getStart().getTime().toString());


    }


    private void getMousePos() {
        PointerInfo a = MouseInfo.getPointerInfo();
        Point b = a.getLocation();
        int x = (int) b.getX();
        prevPos = x;
    }

    private void offsetPanels(){
        int offset;

        PointerInfo a = MouseInfo.getPointerInfo();
        Point b = a.getLocation();
        int x = (int) b.getX();

        if (x>prevPos){
            offset = x - prevPos;
        }
        else{
            offset = x - prevPos;
        }

        Point tmp = new Point();
        
        tmp = jPanel3.getLocation();
        tmp.x += offset;
        jPanel3.setLocation(tmp);

        tmp = jPanel4.getLocation();
        tmp.x += offset;
        jPanel4.setLocation(tmp);

        tmp = jPanel5.getLocation();
        tmp.x += offset;
        jPanel5.setLocation(tmp);

        tmp = jPanel6.getLocation();
        tmp.x += offset;
        jPanel6.setLocation(tmp);

        tmp = jPanel7.getLocation();
        tmp.x += offset;
        jPanel7.setLocation(tmp);

        tmp = jPanel8.getLocation();
        tmp.x += offset;
        jPanel8.setLocation(tmp);

        tmp = jPanel9.getLocation();
        tmp.x += offset;
        jPanel9.setLocation(tmp);

        tmp = jPanel10.getLocation();
        tmp.x += offset;
        jPanel10.setLocation(tmp);
        checkPanelPos();

        prevPos = x;
    }

    private void checkPanelPos(){
        int panel1Width;
        panel1Width = jPanel1.getWidth();

        Point tmp = new Point();
        Point tmp1 = new Point();

        tmp = jPanel3.getLocation();
        if (tmp.x < -500 ){
            tmp1 = jPanel10.getLocation();
            tmp.x = tmp1.x + 158;
            jPanel3.setLocation(tmp);
            jPanel3.increaseDate();
            jPanel3.setEntries(tmpDiary.getEntriesByDate(jPanel3.getDate()));
        }
        else if (tmp.x > panel1Width +200 ){
            tmp1 = jPanel4.getLocation();
            tmp.x = tmp1.x - 158;
            jPanel3.setLocation(tmp);
            jPanel3.decreaseDate();
            jPanel3.setEntries(tmpDiary.getEntriesByDate(jPanel3.getDate()));
        }

        tmp = jPanel4.getLocation();
        if (tmp.x < -500 ){
            tmp1 = jPanel3.getLocation();
            tmp.x = tmp1.x + 158;
            jPanel4.setLocation(tmp);
            jPanel4.increaseDate();
            jPanel4.setEntries(tmpDiary.getEntriesByDate(jPanel4.getDate()));
        }
        else if (tmp.x > panel1Width +200 ){
            tmp1 = jPanel5.getLocation();
            tmp.x = tmp1.x - 158;
            jPanel4.setLocation(tmp);
            jPanel4.decreaseDate();
            jPanel4.setEntries(tmpDiary.getEntriesByDate(jPanel4.getDate()));
        }

        tmp = jPanel5.getLocation();
        if (tmp.x < -500 ){
            tmp1 = jPanel4.getLocation();
            tmp.x = tmp1.x + 158;
            jPanel5.setLocation(tmp);
            jPanel5.increaseDate();
            jPanel5.setEntries(tmpDiary.getEntriesByDate(jPanel5.getDate()));
        }
        else if (tmp.x > panel1Width +200 ){
            tmp1 = jPanel6.getLocation();
            tmp.x = tmp1.x - 158;
            jPanel5.setLocation(tmp);
            jPanel5.decreaseDate();
            jPanel5.setEntries(tmpDiary.getEntriesByDate(jPanel5.getDate()));
        }

        tmp = jPanel6.getLocation();
        if (tmp.x < -500 ){
            tmp1 = jPanel5.getLocation();
            tmp.x = tmp1.x + 158;
            jPanel6.setLocation(tmp);
            jPanel6.increaseDate();
            jPanel6.setEntries(tmpDiary.getEntriesByDate(jPanel6.getDate()));
        }
        else if (tmp.x > panel1Width +200 ){
            tmp1 = jPanel7.getLocation();
            tmp.x = tmp1.x - 158;
            jPanel6.setLocation(tmp);
            jPanel6.decreaseDate();
            jPanel6.setEntries(tmpDiary.getEntriesByDate(jPanel6.getDate()));
        }

        tmp = jPanel7.getLocation();
        if (tmp.x < -500 ){
            tmp1 = jPanel6.getLocation();
            tmp.x = tmp1.x + 158;
            jPanel7.setLocation(tmp);
            jPanel7.increaseDate();
            jPanel7.setEntries(tmpDiary.getEntriesByDate(jPanel7.getDate()));
        }
        else if (tmp.x > panel1Width +200 ){
            tmp1 = jPanel8.getLocation();
            tmp.x = tmp1.x - 158;
            jPanel7.setLocation(tmp);
            jPanel7.decreaseDate();
            jPanel7.setEntries(tmpDiary.getEntriesByDate(jPanel7.getDate()));
        }

        tmp = jPanel8.getLocation();
        if (tmp.x < -500 ){
            tmp1 = jPanel7.getLocation();
            tmp.x = tmp1.x + 158;
            jPanel8.setLocation(tmp);
            jPanel8.increaseDate();
            jPanel8.setEntries(tmpDiary.getEntriesByDate(jPanel8.getDate()));
        }
        else if (tmp.x > panel1Width +200 ){
            tmp1 = jPanel9.getLocation();
            tmp.x = tmp1.x - 158;
            jPanel8.setLocation(tmp);
            jPanel8.decreaseDate();
            jPanel8.setEntries(tmpDiary.getEntriesByDate(jPanel8.getDate()));
        }

        tmp = jPanel9.getLocation();
        if (tmp.x < -500 ){
            tmp1 = jPanel8.getLocation();
            tmp.x = tmp1.x + 158;
            jPanel9.setLocation(tmp);
            jPanel9.increaseDate();
            jPanel9.setEntries(tmpDiary.getEntriesByDate(jPanel9.getDate()));
        }
        else if (tmp.x > panel1Width +200 ){
            tmp1 = jPanel10.getLocation();
            tmp.x = tmp1.x - 158;
            jPanel9.setLocation(tmp);
            jPanel9.decreaseDate();
            jPanel9.setEntries(tmpDiary.getEntriesByDate(jPanel9.getDate()));
        }

        tmp = jPanel10.getLocation();
        if (tmp.x < -500 ){
            tmp1 = jPanel9.getLocation();
            tmp.x = tmp1.x + 158;
            jPanel10.setLocation(tmp);
            jPanel10.increaseDate();
            jPanel10.setEntries(tmpDiary.getEntriesByDate(jPanel10.getDate()));
        }
        else if (tmp.x > panel1Width +200 ){
            tmp1 = jPanel3.getLocation();
            tmp.x = tmp1.x - 158;
            jPanel10.setLocation(tmp);
            jPanel10.decreaseDate();
            jPanel10.setEntries(tmpDiary.getEntriesByDate(jPanel10.getDate()));
        }
    }

    private void initPanelPos() {
        Point tmp = new Point();
        Calendar panelDate;

        tmp = jPanel3.getLocation();
        panelDate = Calendar.getInstance();
        clearTime(panelDate);
        jPanel3.setDate(panelDate);

        panelDate = Calendar.getInstance();
        clearTime(panelDate);
        panelDate.add(Calendar.DAY_OF_YEAR, 1);
        jPanel4.setDate(panelDate);

        panelDate = Calendar.getInstance();
        clearTime(panelDate);
        panelDate.add(Calendar.DAY_OF_YEAR, 2);
        jPanel5.setDate(panelDate);

        panelDate = Calendar.getInstance();
        clearTime(panelDate);
        panelDate.add(Calendar.DAY_OF_YEAR, 3);
        jPanel6.setDate(panelDate);

        panelDate = Calendar.getInstance();
        clearTime(panelDate);
        panelDate.add(Calendar.DAY_OF_YEAR, 4);
        jPanel7.setDate(panelDate);

        panelDate = Calendar.getInstance();
        clearTime(panelDate);
        panelDate.add(Calendar.DAY_OF_YEAR, 5);
        jPanel8.setDate(panelDate);

        panelDate = Calendar.getInstance();
        clearTime(panelDate);
        panelDate.add(Calendar.DAY_OF_YEAR, 6);
        jPanel9.setDate(panelDate);

        panelDate = Calendar.getInstance();
        clearTime(panelDate);
        panelDate.add(Calendar.DAY_OF_YEAR, 7);
        jPanel10.setDate(panelDate);

        tmp.x = -450;
        jPanel3.setLocation(tmp);        
        tmp.x = tmp.x + 158;
        jPanel4.setLocation(tmp);
        tmp.x = tmp.x + 158;
        jPanel5.setLocation(tmp);
        tmp.x = tmp.x + 158;
        jPanel6.setLocation(tmp);
        tmp.x = tmp.x + 158;
        jPanel7.setLocation(tmp);
        tmp.x = tmp.x + 158;
        jPanel8.setLocation(tmp);
        tmp.x = tmp.x + 158;
        jPanel9.setLocation(tmp);
        tmp.x = tmp.x + 158;
        jPanel10.setLocation(tmp);
    }
    
   private void actionCheckLogin()
   {
      LOGIT.fine("Checking if the a user is logged in");
      if(LogOnDialog.loggedOn)
      {
         if(diaryList.getSelectedIndex() == -1)
         {
            actionLogin();
         }
      }
      else
      {
         actionLogout();
      }
    }

    private void actionLogin()
    {
      displayName.setText(LogOnDialog.thisUser.getDisplayName());
      diaryList.removeAllItems();
      for(Diary aDiary : LogOnDialog.thisUser.getDiaries())
      {
         diaryList.addItem(aDiary);
         if(aDiary.getID() == LogOnDialog.thisUser.getDefaultDiaryID())
         {
            diaryList.setSelectedItem(aDiary);
         }
      }
      logOnMenuItem.setEnabled(false);
      logOffMenuItem.setEnabled(true);
    }

    private void actionLogout()
    {
      logOffMenuItem.setEnabled(false);
      logOnMenuItem.setEnabled(true);
      displayName.setText("[No logged on]");
      diaryList.removeAllItems();
    }
}
